<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ngbs.dao.LostAndFountMapper" >
  <resultMap id="BaseResultMap" type="com.ngbs.pojo.LostAndFount" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="found_location" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="found_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="description" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, found_location, found_time, description, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from ngbs_lost_and_fount
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ngbs_lost_and_fount
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ngbs.pojo.LostAndFount" >
    insert into ngbs_lost_and_fount (id, user_id, found_location,
      found_time, description, create_time,
      update_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{foundLocation,jdbcType=VARCHAR},
      #{foundTime,jdbcType=TIMESTAMP}, #{description,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ngbs.pojo.LostAndFount" >
    insert into ngbs_lost_and_fount
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="foundLocation != null" >
        found_location,
      </if>
      <if test="foundTime != null" >
        found_time,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="createTime == null" >
        create_time,
      </if>
      <if test="updateTime == null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="foundLocation != null" >
        #{foundLocation,jdbcType=VARCHAR},
      </if>
      <if test="foundTime != null" >
        #{foundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime == null" >
        now(),
      </if>
      <if test="updateTime == null" >
        now(),
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ngbs.pojo.LostAndFount" >
    update ngbs_lost_and_fount
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="foundLocation != null" >
        found_location = #{foundLocation,jdbcType=VARCHAR},
      </if>
      <if test="foundTime != null" >
        found_time = #{foundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ngbs.pojo.LostAndFount" >
    update ngbs_lost_and_fount
    set user_id = #{userId,jdbcType=INTEGER},
      found_location = #{foundLocation,jdbcType=VARCHAR},
      found_time = #{foundTime,jdbcType=TIMESTAMP},
      description = #{description,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByKeyword" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List" />
    from ngbs_lost_and_fount
    <where>
      <if test="keyword != null">
         (found_location like #{keyword} or description like #{keyword})
      </if>
    </where>

  </select>
</mapper>